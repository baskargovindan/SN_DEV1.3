<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="catalog_script_client">
    <catalog_script_client action="INSERT_OR_UPDATE">
        <active>true</active>
        <applies_catalog>true</applies_catalog>
        <applies_extended>false</applies_extended>
        <applies_req_item>false</applies_req_item>
        <applies_sc_task>false</applies_sc_task>
        <applies_target_record>false</applies_target_record>
        <applies_to>item</applies_to>
        <cat_item display_value="Set Folder Permissions">01d24ebadb1013001de1fabdbf961903</cat_item>
        <cat_variable/>
        <condition/>
        <description/>
        <field/>
        <global>true</global>
        <isolate_script>false</isolate_script>
        <messages/>
        <name>ADManagerSetFolderPermissionsOnSubmit</name>
        <order/>
        <script><![CDATA[function onSubmit() {
	if(getFolders().length == 0)
	{
		alert('Please specify a folder name');
		g_form.submitted = false;
		return false;
	}

	if(getPermissionKeys().length == 0)
	{
		alert('Please select a permission');
		g_form.submitted = false;
		return false;
	}

	var duration = getDuration();
	if(duration.durationType == 'date')
	{
		var durationString = duration.duration;
		if(new Date(durationString) < new Date() || durationString == '-' || durationString == '')
		{
			alert('Please select a valid date.');
			g_form.submitted = false;
			return false;
		}
	}
	if(getActionId() != 1 && getActionValueId() == '')
	{
		alert('Please select a  group.');
		g_form.submitted = false;
		return false;
	}
	var loadingWindow = getDialogWindow();
	loadingWindow.render();

	g_form.clearMessages();

	var usersList = getSelectedUsersList();
	if(usersList.length == 0)
	{
		alert("Please select a user");
		loadingWindow.destroy();
		g_form.submitted = false;
		return false;
	}


	var gURL = new GlideURL();
	gURL.setFromCurrent();
	var parent = gURL.getParam('parent');




	if(parent && g_user.hasRole('x_manen_admanager.admanager_admin'))
	{
		if(parent == 'module')
		{
			setFolderPermissions(usersList);
		}
		else if(parent == 'menu')
		{
			setFolderPermissions(usersList);
		}
	}
	else
	{
		var requestDetails = constructRequestDetails(usersList);
		var incidentAjax = new GlideAjax('ADManagerIncidentHandler');
		incidentAjax.addParam("sysparm_name","createIncident");
		incidentAjax.addParam("requestDetails", requestDetails);
		incidentAjax.addParam("description", "Please provide the mentioned permissions to below user(s).");
		incidentAjax.addParam("comments", constructComments(requestDetails));
		incidentAjax.getXMLAnswer(serverResponse);
	}
	function serverResponse(response)
	{
		loadingWindow.destroy();
		g_form.addInfoMessage('Your request has been successfully submitted to the IT team.');
		emptyAllFields();
	}

	function setFolderPermissions(usersList)
	{
		var actionId = getActionId();
		var setFolderPermissionsAJAX = new GlideAjax("ADManagerAPIUtil");
		setFolderPermissionsAJAX.addParam("sysparm_name","setFolderPermissions");
		setFolderPermissionsAJAX.addParam("domainName", g_form.getValue('Select_Domain'));
		setFolderPermissionsAJAX.addParam("folders", constructFolderJSON());
		setFolderPermissionsAJAX.addParam("PERMISSION_COMPONENT", constructPermissionsComponent(usersList));
		setFolderPermissionsAJAX.addParam("actionId", getActionId());
		if(actionId != 1)
		{
			setFolderPermissionsAJAX.addParam("actionValue", getActionValue());
			setFolderPermissionsAJAX.addParam("actionValueId", getActionValueId());
		}
		setFolderPermissionsAJAX.addParam("revertDuration", JSON.stringify(getDuration()));		
		setFolderPermissionsAJAX.getXMLAnswer(setFolderPermissionsResponse);	

		function setFolderPermissionsResponse(setFolderPermissionsResult)
		{
			setFolderPermissionsResult = setFolderPermissionsResult.evalJSON();
			if(setFolderPermissionsResult.status == 'true')
			{
				var statusMessage = (setFolderPermissionsResult.responseBody).evalJSON();
				var userList = getSelectedUsersList();
				for(var i=0; i<statusMessage.length;i++)
				{

					var statusString = statusMessage[i].statusMessage;
					var status = statusMessage[i].status;
					var successMsg = '';
					if(status == '1')
					{
						g_form.addInfoMessage(statusString);

						successMsg += '\n Full Name : '+userList[0].sAMAccountName+ ' \n Permissions : ';
						var permissions= getPermissions();
						var keys = Object.keys(permissions);
						for(var j = 0; j < keys.length; k++)
						{
							var key = keys[j];
							if(j == 0)
								successMsg += permissions[key];
							else if(j == keys.length-1)
								successMsg += ' & '+permissions[key];
							else
								successMsg += ', ' + permissions[key];
							j++;
						}

						successMsg += '\n Folder Path : ';

						var folders = getFolders();
						for(var k=0; k<folders.length; k++)
						{
							if(k == 0)
								successMsg += folders[k].folderPath;
							else if(j == folders.length-1)
								successMsg += ' & '+folders[k].folderPath;
							else
								successMsg += ', ' +  folders[k].folderPath;
							j++;
						}
						emptyAllFields();
					}
					else
					{
						successMsg = statusString;
						g_form.addErrorMessage(statusString);
					}

					var sys_id = gURL.getParam('sys_id');
					if(sys_id != null && sys_id != '')
					{
						updateComments(sys_id, successMsg);
					}
				}			
			}
			else
			{
				if(setFolderPermissionsResult.statusMessage)
					g_form.addErrorMessage(setFolderPermissionsResult.statusMessage);
				else
					g_form.addErrorMessage('Cannot connect to ADManager Plus. Possible reasons could be no network connection, wrong server name or port number, or MID server being down.');
			}

			loadingWindow.destroy();			
		}
	}
	g_form.submitted = false;
	return false;
}
function constructRequestDetails(usersList)
{
	var requestDetails = {};
	requestDetails.domainName = g_form.getValue('Select_Domain');
	requestDetails.searchText = g_form.getValue('Name');
	requestDetails.usersList = usersList;
	requestDetails.folders = getFolders();
	requestDetails.permissions = getPermissions();
	requestDetails.duration = getDuration();
	requestDetails.actionId = getActionId();
	if(requestDetails.actionId != 1)
	{
		requestDetails.actionValueId = getActionValueId();
		requestDetails.actionValue = getActionValue();			
	}

	requestDetails = JSON.stringify(requestDetails);
	return requestDetails;
}
function constructComments(requestDetails)
{
	requestDetails = requestDetails.evalJSON();
	var comments = '[code]<ul class="sn-widget-list sn-widget-list-table">';

	comments = comments+'<li class="ng-scope"><span class="sn-widget-list-table-cell">Selected Domain </span><span class="sn-widget-list-table-cell"><span class="ng-scope">'+requestDetails.domainName+'</span></span></li>';

	comments = comments+'<li class="ng-scope"><span class="sn-widget-list-table-cell">Selected User </span><span class="sn-widget-list-table-cell"><span class="ng-scope">';

	var userList = requestDetails.usersList;

	for(var i=0; i<userList.length; i++)
	{
		var userName = userList[i].DISPLAY_NAME;
		if(userName=="-")
		{
			userName = userList[i].userPrincipalName;
		}
		if(i ==0)
			comments = comments+userName;
		else if(i==userList.length-1)
			comments = comments+'  &  '+userName+'.';
		else
			comments = comments+',  '+userName;
	}
	comments = comments+'</span></span></li>';

	var folders = requestDetails.folders;
	if(folders.length > 0)
	{
		comments = comments+'<li class="ng-scope"><span class="sn-widget-list-table-cell">Folders </span><span class="sn-widget-list-table-cell"><span class="ng-scope">';
		for(var j=0; j<folders.length; j++)
		{
			if(j ==0)
				comments = comments+folders[j].folderName;
			else if(j==addGroups.length-1)
				comments = comments+'  &  '+folders[j].folderName+'.';
			else
				comments = comments+',  '+folders[j].folderName;
		}
		comments = comments+'</span></span></li>';
	}

	var permissions = requestDetails.permissions;
	if(permissions.length > 0)
	{
		comments = comments+'<li class="ng-scope"><span class="sn-widget-list-table-cell">Permissions </span><span class="sn-widget-list-table-cell"><span class="ng-scope">';
		for(var j=0; j<permissions.length; j++)
		{
			if(j ==0)
				comments = comments+permissions[j].folderName;
			else if(j==addGroups.length-1)
				comments = comments+'  &  '+permissions[j].folderName+'.';
			else
				comments = comments+',  '+permissions[j].folderName;
		}
		comments = comments+'</span></span></li>';
	}

	comments = comments+'<li class="ng-scope"><span class="sn-widget-list-table-cell">Duration </span><span class="sn-widget-list-table-cell"><span class="ng-scope">'+getDurationString()+'</span></span></li>';

	comments = comments+'<li class="ng-scope"><span class="sn-widget-list-table-cell">Action </span><span class="sn-widget-list-table-cell"><span class="ng-scope">';

	if(requestDetails.actionId == 1)
	{
		comments += 'Assigning permission to user directly';
	}
	else if(requestDetails.actionId == 2)
	{
		comments += 'Adding the user to a group having the same permission. Group Name: '+requestDetails.actionValue;
	}
	else if(requestDetails.actionId == 3)
	{
		comments += 'Adding the user to a selected group and assigning permission to that group. Group Name: '+requestDetails.actionValue;
	}
	comments += '</span></span></li>';

	comments = comments+'</ul>[/code]';
	return comments;
}
function updateComments(sys_id, commment)
{
	var incidentAjax = new GlideAjax("ADManagerIncidentHandler");
	incidentAjax.addParam("sysparm_name","addComments");
	incidentAjax.addParam("comments", commment);
	incidentAjax.addParam("sys_id", sys_id);
	incidentAjax.getXMLAnswer(serverRespose);
	function serverRespose(response){}
}
function constructPermissionsComponent(userList)
{
	var permissionsComps = [];
	var permissionsComp = {};
	var account = {};
	var user = {};

	for(var i=0; i<userList.length; i++)
	{
		user[userList[i].objectSID] = userList[i].sAMAccountName;
	}
	account.user = user;	

	var accessMask = getPermissions();
	permissionsComp.account = account;
	permissionsComp.accessMask = permissions;
	permissionsComp.inheritFlag = 3;
	permissionsComp.permissionType = 0;
	permissionsComp.domainName = g_form.getValue('Select_Domain');
	permissionsComps.push(permissionsComp);	
	return JSON.stringify(permissionsComps);
}
function constructFolderJSON()
{
	var folderJSON = {};
	var folders = getFolders();
	for(var i=0; i<folders.length; i++)
	{
		var folder = folders[i];
		folderJSON[folder.folderPath] = folder.folderName;
	}
	return JSON.stringify(folderJSON);
}
]]></script>
        <sys_class_name>catalog_script_client</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-02-19 09:47:43</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>0765aafadb5013001de1fabdbf9619e7</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>ADManagerSetFolderPermissionsOnSubmit</sys_name>
        <sys_overrides/>
        <sys_package display_value="ADManager Plus" source="x_manen_admanager">f61bfc1fdb9e7600360eda11cf961902</sys_package>
        <sys_policy/>
        <sys_scope display_value="ADManager Plus">f61bfc1fdb9e7600360eda11cf961902</sys_scope>
        <sys_update_name>catalog_script_client_0765aafadb5013001de1fabdbf9619e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-03-21 10:02:37</sys_updated_on>
        <table/>
        <type>onSubmit</type>
        <ui_type>0</ui_type>
        <variable_set/>
        <view/>
    </catalog_script_client>
</record_update>
